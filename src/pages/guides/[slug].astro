---
import { type CollectionEntry, getCollection } from 'astro:content';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import BaseHead from '../../components/BaseHead.astro';
import { SITE_TITLE } from '../../consts';

export async function getStaticPaths() {
  const guides = await getCollection('guides');
  return guides.map((guide) => ({
    params: { slug: guide.slug },
    props: guide,
  }));
}
type Props = CollectionEntry<'guides'>;

const guide = Astro.props;
const { Content } = await guide.render();
---

<html lang="en">
  <head>
    <BaseHead 
      title={`${guide.data.title} - ${SITE_TITLE}`} 
      description={guide.data.description}
      image={guide.data.heroImage || undefined}
    />
  </head>

  <body class="bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 overflow-x-hidden transition-colors duration-200">
    <Header />
    <main class="w-full overflow-x-hidden px-4 py-8">
      <article class="prose dark:prose-invert mx-auto bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm max-w-3xl w-full">
        {guide.data.heroImage && (
          <div class="mb-8 w-full">
            <img 
              src={guide.data.heroImage} 
              alt="" 
              class="w-full h-auto rounded-lg shadow-lg"
            />
          </div>
        )}

        <div class="text-center mb-8">
          <h1 class="text-4xl font-bold mb-4 text-gray-900 dark:text-white">{guide.data.title}</h1>
          
          <div class="metadata flex flex-wrap justify-center gap-2 mb-4">
            <span class={`inline-block px-2 py-1 rounded text-sm ${
              guide.data.difficulty === 'beginner' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' :
              guide.data.difficulty === 'intermediate' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200' :
              'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'
            }`}>
              {guide.data.difficulty.charAt(0).toUpperCase() + guide.data.difficulty.slice(1)}
            </span>
            
            <span class="text-gray-600 dark:text-gray-400">
              Category: {guide.data.category}
            </span>
          </div>
          
          <hr class="my-4 border-gray-200 dark:border-gray-700" />
        </div>

        {guide.data.prerequisites && guide.data.prerequisites.length > 0 && (
          <div class="bg-gray-100 dark:bg-gray-800 p-4 rounded-lg mb-6">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mt-0">Prerequisites</h3>
            <ul class="mt-2 pl-5">
              {guide.data.prerequisites.map(prereq => (
                <li>{prereq}</li>
              ))}
            </ul>
          </div>
        )}

        <!-- Guide content -->
        <div class="w-full overflow-x-hidden prose dark:prose-invert prose-headings:text-gray-900 dark:prose-headings:text-white prose-a:text-accent hover:prose-a:text-accent-dark">
          <Content />
        </div>
      </article>
    </main>
    <Footer />
  </body>
</html>