<button 
  id="theme-toggle" 
  class="relative p-2 rounded-full bg-gray-100 dark:bg-gray-800 hover:ring-2 ring-gray-300 dark:ring-gray-600 transition-all duration-300 overflow-hidden"
  aria-label="Toggle theme"
>
  <div class="w-8 h-8 flex items-center justify-center">
    <!-- Sun icon (visible in dark mode) -->
    <svg 
      id="sun-icon" 
      class="theme-toggle-icon w-6 h-6 absolute text-accent-dark dark:text-accent dark:active inactive" 
      fill="none" 
      stroke="currentColor" 
      viewBox="0 0 24 24" 
      xmlns="http://www.w3.org/2000/svg"
    >
      <path 
        stroke-linecap="round" 
        stroke-linejoin="round" 
        stroke-width="2" 
        d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
      ></path>
    </svg>
    
    <!-- Moon icon (visible in light mode) -->
    <svg 
      id="moon-icon" 
      class="theme-toggle-icon w-6 h-6 absolute text-accent active dark:inactive" 
      fill="none" 
      stroke="currentColor" 
      viewBox="0 0 24 24" 
      xmlns="http://www.w3.org/2000/svg"
    >
      <path 
        stroke-linecap="round" 
        stroke-linejoin="round" 
        stroke-width="2" 
        d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
      ></path>
    </svg>
  </div>
</button>

<script>
  const themeToggle = document.getElementById('theme-toggle');
  const sunIcon = document.getElementById('sun-icon');
  const moonIcon = document.getElementById('moon-icon');
  
  // Set theme based on user preference or default to light
  const setTheme = (theme: 'light' | 'dark') => {
    if (theme === 'dark') {
      document.documentElement.classList.add('dark');
      moonIcon?.classList.remove('active');
      moonIcon?.classList.add('inactive');
      sunIcon?.classList.remove('inactive');
      sunIcon?.classList.add('active');
    } else {
      document.documentElement.classList.remove('dark');
      sunIcon?.classList.remove('active');
      sunIcon?.classList.add('inactive');
      moonIcon?.classList.remove('inactive');
      moonIcon?.classList.add('active');
    }
    localStorage.setItem('theme', theme);
  };

  // Get the initial theme from localStorage or system preference
  const getTheme = (): 'light' | 'dark' => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme') as 'light' | 'dark';
    }
    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
      return 'dark';
    }
    return 'light';
  };

  // Initialize theme
  const initialTheme = getTheme();
  setTheme(initialTheme);

  // Toggle theme when button is clicked
  themeToggle?.addEventListener('click', () => {
    const currentTheme = localStorage.getItem('theme') as 'light' | 'dark' || 'light';
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    
    // Add animation class
    themeToggle?.classList.add('animate-pulse');
    
    // Set the theme with a slight delay for better animation effect
    setTimeout(() => {
      setTheme(newTheme);
      themeToggle?.classList.remove('animate-pulse');
    }, 150);
  });
</script> 