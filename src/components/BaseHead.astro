---
import '../styles/global.css';

interface Props {
  title: string;
  description: string;
  image?: string | undefined;
  author?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { title, description, image = '/og-image.jpg', author = 'loftwah' } = Astro.props;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1,viewport-fit=cover" />
<!-- Favicon and App Icons -->
<link rel="icon" href="/favicon.ico" sizes="any" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
<link rel="apple-touch-icon" href="/apple-touch-icon.png" />
<link rel="manifest" href="/site.webmanifest" />
<meta name="generator" content={Astro.generator} />

<!-- Font preloads -->
<link rel="preload" href="/fonts/atkinson-regular.woff" as="font" type="font/woff" crossorigin />
<link rel="preload" href="/fonts/atkinson-bold.woff" as="font" type="font/woff" crossorigin />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />
<meta name="author" content={author} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={image ? new URL(image.startsWith('http') ? image : image.startsWith('/') ? image.slice(1) : image, Astro.site).toString() : new URL('/og-image.jpg', Astro.site).toString()} />

<!-- Twitter/X -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={image ? new URL(image.startsWith('http') ? image : image.startsWith('/') ? image.slice(1) : image, Astro.site).toString() : new URL('/og-image.jpg', Astro.site).toString()} />

<!-- Additional style to block transitions during theme initialization -->
<style is:inline>
  .transition-blocker * {
    transition: none !important;
  }
</style>

<!-- Dark mode initialization script -->
<script is:inline>
  // Immediate execution to avoid flash of unstyled content
  (function() {
    // Add transition blocker class
    document.documentElement.classList.add('transition-blocker');
    
    // Initialize dark mode based on user preference
    const theme = (() => {
      if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
        return localStorage.getItem('theme');
      }
      if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
        return 'dark';
      }
      return 'light';
    })();

    // Set theme immediately
    if (theme === 'dark') {
      document.documentElement.classList.add('dark');
      document.documentElement.setAttribute('data-theme', 'dark');
    } else {
      document.documentElement.classList.remove('dark');
      document.documentElement.setAttribute('data-theme', 'light');
    }
    
    // Remove transition blocker after a short delay
    // This prevents transitions on initial page load
    window.addEventListener('load', function() {
      setTimeout(function() {
        document.documentElement.classList.remove('transition-blocker');
      }, 0);
    });
  })();
</script>